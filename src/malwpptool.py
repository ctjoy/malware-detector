import os
import json
from config.proj import VALID_FEATURES

def feature_static( malware_root_dir ):
    feature_static_dict = dict()
    fail_dict = dict()
    fail_dict['Exception'] = list()
    malware_dir_list = os.listdir(malware_root_dir)
    for malware_dir in malware_dir_list:
        info_path = malware_root_dir + '/' + malware_dir + '/info'
        try:
            with open(info_path) as info_file:
                info_data = json.load(info_file)
        except Exception as e:
            #e_type = type(e)
            fail_dict['Exception'].append(malware_dir)
            continue

        for key in info_data.keys():
            feature_static_dict[key] = feature_static_dict.get(key, 0) + 1

    print('the following file is fail')
    for fail_file in fail_dict['Exception']:
        print(fail_file)

    total_count_malware = len(malware_dir_list) - len(fail_dict['Exception'])
    return total_count_malware, feature_static_dict


def get_valid_feature( malware_root_dir ):
    valid_feature_list = list()
    total_count_malware, feature_static_dict = feature_static(malware_root_dir)
    for f in feature_static_dict.keys():
        if feature_static_dict[f] / total_count_malware > 0.995:
            valid_feature_list.append(f)

    valid_feature_list.sort()
    return valid_feature_list

def uniform_trend_data( trend_dir, json_output_path ):
    fail_dict = dict()
    fail_dict['Exception'] = list()
    result = dict()
    if trend_dir[-1] != '/':
        trend_dir += '/'
    malware_dir_list = os.listdir(trend_dir)
    for malware_dir in malware_dir_list:
        try:
            dict_format = uniform_trend_file(trend_dir + malware_dir)
        except Exception as e:
            #e_type = type(e)
            fail_dict['Exception'].append(malware_dir)
            continue

        result[malware_dir] = dict_format

    with open(json_output_path, 'w') as jop:
        json.dump(result, jop)
    return result, fail_dict

def uniform_trend_file( file_dir ):
    result = dict()
    if file_dir[-1] != '/':
        file_dir += '/'
    info_path = file_dir + 'info'
    import_path = file_dir + 'import'
    try:
        with open(info_path) as info_file:
            info_data = json.load(info_file)
        with open(import_path, 'r') as import_file:
            impt = uniform_trend_import(import_file)
    except Exception as e:
        print('Error: ' + file_dir)
        print(e)
        raise Exception

    for f in info_data:
        if f in VALID_FEATURES:
            result[f] = info_data[f]

    result["ImportTable"] = impt
    return result

def uniform_trend_import( import_file ):
    impt = dict()
    for line in import_file:
        idx_dll = line.find('.dll')
        if idx_dll == -1 :
            idx_dll = line.find('.DLL')
        if idx_dll == -1:
            continue    
        
        item = line.split()
        impt_func = item[1]
        impt_lib = item[0][:idx_dll]
        impt_lib += '.dll'
        func_list = impt.get(impt_lib, [])
        func_list.append(impt_func)
        impt[impt_lib] = func_list

    return impt


